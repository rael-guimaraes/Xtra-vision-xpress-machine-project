
import entities.Rent;
import exceptions.ValidationException;
import java.util.InputMismatchException;
import javax.swing.JFrame;

import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JTextArea;
import utilityClasses.XpressMachineConstantes;


/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
/**
 *
 * @author raelg
 */
public class CheckOutPage extends JFrame {

    private Rent rent;

    private static final String EMPTY_STRING = "";
    private javax.swing.JButton ReturnButton;
    private javax.swing.JLabel alertMessageLabel;
    private javax.swing.JButton checkoutButton;
    private javax.swing.JLabel emailLabel;
    private javax.swing.JTextField emailTextField;
    private javax.swing.JCheckBox jCheckBox1;
    private JTextArea movieInfoLabel;
    private javax.swing.JLabel priceLabel;
    private javax.swing.JCheckBox recordEmailCheckBox;

    public CheckOutPage(Rent rent) {
        this.rent = rent;
        initComponents();
        // displaying the total price for the chosen movies
        priceLabel.setText("Total: â‚¬ " + getTotalPrice(this.rent));
        this.setVisible(true);

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">                          
    private void initComponents() {

        jCheckBox1 = new javax.swing.JCheckBox();
        priceLabel = new javax.swing.JLabel();
        checkoutButton = new javax.swing.JButton();
        emailLabel = new javax.swing.JLabel();
        emailTextField = new javax.swing.JTextField();
        recordEmailCheckBox = new javax.swing.JCheckBox();
        alertMessageLabel = new javax.swing.JLabel();
        ReturnButton = new javax.swing.JButton();

        getSelectedMovieList();

        jCheckBox1.setText("jCheckBox1");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        checkoutButton.setText("Checkout");
        checkoutButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                checkoutButtonActionPerformed(evt);
            }
        });

        emailLabel.setText("Please Enter Your Email for Receipt");

        recordEmailCheckBox.setText("I would like to receive updates on new movies reliese");

        ReturnButton.setText("Return");
        ReturnButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ReturnButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addGroup(layout.createSequentialGroup()
                                                .addContainerGap()
                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                                        .addGroup(layout.createSequentialGroup()
                                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                                        .addComponent(recordEmailCheckBox)
                                                                        .addComponent(ReturnButton, javax.swing.GroupLayout.PREFERRED_SIZE, 77, javax.swing.GroupLayout.PREFERRED_SIZE))
                                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                                .addComponent(checkoutButton))
                                                        .addComponent(emailTextField)
                                                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                                                        .addComponent(alertMessageLabel, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                                        .addComponent(emailLabel, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 279, javax.swing.GroupLayout.PREFERRED_SIZE))
                                                                .addGap(18, 18, 18)
                                                                .addComponent(priceLabel)
                                                                .addGap(8, 8, 8))))
                                        .addGroup(layout.createSequentialGroup()
                                                .addGap(88, 88, 88)
                                                .addComponent(movieInfoLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 241, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addContainerGap(11, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                                .addGap(26, 26, 26)
                                .addComponent(movieInfoLabel, javax.swing.GroupLayout.DEFAULT_SIZE, 119, Short.MAX_VALUE)
                                .addGap(18, 18, 18)
                                .addComponent(alertMessageLabel)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(emailLabel)
                                        .addComponent(priceLabel))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(emailTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(recordEmailCheckBox)
                                .addGap(1, 1, 1)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(checkoutButton, javax.swing.GroupLayout.PREFERRED_SIZE, 51, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(ReturnButton, javax.swing.GroupLayout.PREFERRED_SIZE, 51, javax.swing.GroupLayout.PREFERRED_SIZE)))
        );

        pack();
    }

    // method to display the information of the choosen movies
    private void getSelectedMovieList() {
        StringBuilder moviesInfo = new StringBuilder();
        this.rent.getMovieList().stream().forEach(movie -> moviesInfo.append(movie.getName() + " --- " + movie.getGender() + " --- " + movie.getReleaseDate() + "\n"));
        movieInfoLabel = new JTextArea(moviesInfo.toString());
        movieInfoLabel.setEditable(false);
    }
    // go to paymentPage

    private void checkoutButtonActionPerformed(java.awt.event.ActionEvent evt) {
        try {
            new PaymentPage(rent, getEmail(), isSaveEmail(), getTotalPrice(rent));

        } catch (InputMismatchException | ValidationException ex) {
            Logger.getLogger(ReturnMoviePage.class.getName()).log(Level.SEVERE, null, ex);
            alertMessageLabel.setText(ex.getMessage());

        }
    }

    // return to MovieListPage
    private void ReturnButtonActionPerformed(java.awt.event.ActionEvent evt) {
        new MovieListPage();
    }

    // get the total price for the chosen movies
    public double getTotalPrice(Rent rent) {
        return rent.getMovieList().size() * XpressMachineConstantes.MOVIE_RENT_PRICE;

    }

    // get user email foir receipt
    private String getEmail() throws ValidationException {
        if (!emailTextField.getText().equals(EMPTY_STRING)) {
            return emailTextField.getText();
        }
        throw new ValidationException("Please enter email!");
    }

    // if check box is ticked the user email will be saved to receive future offers and new movies updates
    public boolean isSaveEmail() {
        return recordEmailCheckBox.isSelected();

    }

}
