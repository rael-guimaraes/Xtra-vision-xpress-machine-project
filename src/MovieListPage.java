
import controllers.MovieController;
import entities.Movie;
import entities.Rent;
import exceptions.DataException;
import utilityClasses.DialogMessage;
import java.util.Arrays;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.stream.Collectors;
import javax.swing.table.DefaultTableModel;
import utilityClasses.XpressMachineConstantes;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
/**
 *
 * @author raelg
 */
public class MovieListPage extends javax.swing.JFrame {

    private MovieController movieController;
    private DialogMessage successMessage;
    private Rent rent;
    private final Integer MOVIE_ID_COLUMN = 0;

    private javax.swing.JLabel alertMessageLabel;
    private javax.swing.JButton checkoutButton;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable movieTable;
    private javax.swing.JButton exitButton;

    public MovieListPage() {
        movieController = new MovieController();
        successMessage = new DialogMessage();
        rent = new Rent();
        initComponents();
        this.setVisible(true);

        showMovieTable();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">                          
    private void initComponents() {

        jScrollPane2 = new javax.swing.JScrollPane();
        movieTable = new javax.swing.JTable();
        checkoutButton = new javax.swing.JButton();
        alertMessageLabel = new javax.swing.JLabel();
        exitButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        movieTable.setModel(new javax.swing.table.DefaultTableModel(
                new Object[][]{},
                new String[]{}
        ));
        jScrollPane2.setViewportView(movieTable);

        checkoutButton.setText("Go To Checkout");
        checkoutButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                checkoutButtonActionPerformed(evt);
            }
        });

        alertMessageLabel.setText("                                                                                ");

        exitButton.setText("Exit");
        exitButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exitButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                                .addGap(74, 74, 74)
                                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 452, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addContainerGap(67, Short.MAX_VALUE))
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addGap(19, 19, 19)
                                .addComponent(exitButton)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(checkoutButton)
                                .addGap(24, 24, 24))
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(alertMessageLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 240, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(175, 175, 175))
        );
        layout.setVerticalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                                .addContainerGap(33, Short.MAX_VALUE)
                                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 284, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(38, 38, 38)
                                .addComponent(alertMessageLabel)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(checkoutButton, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(exitButton, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addContainerGap())
        );

        pack();
    }

    private void exitButtonActionPerformed(java.awt.event.ActionEvent evt) {
        new MainPage();
        dispose();
    }

    private void checkoutButtonActionPerformed(java.awt.event.ActionEvent evt) {
        insertSelectedMovieIntoList();
// if the user does not choose any movie he will not be able to go to the CheckoutPage
        if (rent.getMovieList() != null) {
            new CheckOutPage(rent);
            dispose();
        } else {
            alertMessageLabel.setText("No movie has been selected");
        }
    }

    // displaying the availables movie
    private void showMovieTable() {
        try {
            String[] columnNames = {"Movie", "Movie id", "Movie Name", "Gender", "Release Date"};
            DefaultTableModel tableModel = movieController.insertMoviesIntoDefaultTableModel(columnNames);

            movieTable.setModel(tableModel);
            movieTable.removeColumn(movieTable.getColumnModel().getColumn(0));
            movieTable.removeColumn(movieTable.getColumnModel().getColumn(0));

        } catch (DataException ex) {
            Logger.getLogger(ReturnMoviePage.class.getName()).log(Level.SEVERE, null, ex);
            alertMessageLabel.setText(ex.getMessage());
        }

    }

    // inseting the selected movies into the cart/list
    private void insertSelectedMovieIntoList() {
        if (movieTable.getSelectedRows().length <= XpressMachineConstantes.MAX_RENT_REGULAR_CUSTOMER) {
            List<Movie> movies = getListOfSelectedMovies();

            rent.setMovieList(movies);

        } else {
            alertMessageLabel.setText("The limit is 4 movies per time!");

        }

    }

    // getting the chosen movie by its id
    private List<Movie> getListOfSelectedMovies() {
        return Arrays.stream(movieTable.getSelectedRows())
                .mapToObj(id -> (Movie) movieTable.getModel().getValueAt(id, MOVIE_ID_COLUMN))
                .collect(Collectors.toList());
    }

}
