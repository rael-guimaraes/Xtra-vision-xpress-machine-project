
import utilityClasses.EmailUtility;
import controllers.RentController;
import entities.Card;
import entities.Rent;
import exceptions.DataException;
import exceptions.InsertionException;
import exceptions.PaymentException;
import exceptions.ValidationException;
import utilityClasses.DialogMessage;
import java.time.LocalDate;
import java.util.InputMismatchException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.mail.MessagingException;
import javax.swing.JFrame;
import javax.swing.JOptionPane;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
/**
 *
 * @author raelg
 */
public class PaymentPage extends JFrame {

    private Rent rent;
    private boolean SaveEmailCheckBox;
    private String userEmail;
    private double totalPrice;
    private RentController rentController;
    private DialogMessage dialogMessage;
    private static final String EMPTY_STRING = "";

    private javax.swing.JButton SubmitCardButton;
    private javax.swing.JLabel alertMessageLabel;
    private javax.swing.JTextField authenticationTextField;
    private javax.swing.JTextField cardNumberTextField;
    private javax.swing.JLabel enterCardLabel;
    private javax.swing.JLabel expiredDateLabel;
    private javax.swing.JTextField expiredDateTextField;
    private javax.swing.JLabel passwordLabel;

    public PaymentPage(Rent rent, String email, boolean SaveEmailCheckBox, double totalPrice) {
        rentController = new RentController();
        dialogMessage = new DialogMessage();

        this.SaveEmailCheckBox = SaveEmailCheckBox;
        this.rent = rent;
        this.userEmail = email;
        this.totalPrice = totalPrice;

        initComponents();
        this.setVisible(true);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">                          
    private void initComponents() {

        enterCardLabel = new javax.swing.JLabel();
        cardNumberTextField = new javax.swing.JTextField();
        expiredDateLabel = new javax.swing.JLabel();
        expiredDateTextField = new javax.swing.JTextField();
        passwordLabel = new javax.swing.JLabel();
        authenticationTextField = new javax.swing.JTextField();
        SubmitCardButton = new javax.swing.JButton();
        alertMessageLabel = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        enterCardLabel.setText("Pelase enter card number");
        expiredDateLabel.setText("Please enter expired date");
        passwordLabel.setText("Please enter password");
        SubmitCardButton.setText("Submit");
        SubmitCardButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SubmitCardButtonActionPerformed(evt);
            }
        });

        alertMessageLabel.setText("                                                                                                                   ");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                                .addContainerGap()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                                .addComponent(SubmitCardButton)
                                                .addGroup(layout.createSequentialGroup()
                                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                                .addComponent(enterCardLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                                .addComponent(expiredDateLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 135, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                                .addComponent(passwordLabel))
                                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                                                .addComponent(expiredDateTextField)
                                                                .addComponent(cardNumberTextField)
                                                                .addComponent(authenticationTextField, javax.swing.GroupLayout.DEFAULT_SIZE, 170, Short.MAX_VALUE))))
                                        .addComponent(alertMessageLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addGap(0, 45, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                                .addGap(43, 43, 43)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(enterCardLabel)
                                        .addComponent(cardNumberTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(30, 30, 30)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(expiredDateLabel)
                                        .addComponent(expiredDateTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(37, 37, 37)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(passwordLabel)
                                        .addComponent(authenticationTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 26, Short.MAX_VALUE)
                                .addComponent(alertMessageLabel)
                                .addGap(17, 17, 17)
                                .addComponent(SubmitCardButton)
                                .addGap(50, 50, 50))
        );

        pack();
    }// </editor-fold>                        

    private void SubmitCardButtonActionPerformed(java.awt.event.ActionEvent evt) {
        deliverMovie(rent);
    }

    // executing all the needed methods
    public void deliverMovie(Rent rent) {
        try {
            addCardToRent(rent);
            addRentDateAndDefiningEmail(rent);
            rentController.processRent(rent);

            showSuccessMessage();
            sendEmail();

            dispose();
        } catch (ValidationException | PaymentException | DataException | InsertionException ex) {
            alertMessageLabel.setText(ex.getMessage());

        }

    }
// showing the success message to the user

    private void showSuccessMessage() {
        int click = dialogMessage.getSuccessMessage("Thank you for renting movie on Xtra-vision kiosk");
        if (click == JOptionPane.YES_OPTION || click == JOptionPane.CLOSED_OPTION) {
            dispose();
            new MainPage();
        }
    }
// adding the rent date to the rent and adding the email to be saved in case of the user check the checkbox

    public void addRentDateAndDefiningEmail(Rent rent) {

        LocalDate rentDate = LocalDate.now();
        rent.setRentDate(rentDate);

        if (SaveEmailCheckBox) {
            rent.setEmail(userEmail);
        }
    }

    // adding the user card te the rent. notice that the expiration date and password wont be saved. they are just used for the banck validation.
    // in a real world project the user wont be entering the card number. there will be a card chip reader
    public void addCardToRent(Rent rent) {

        try {
            String cardNumber = getValidatedCardNumber();
            String expirationDate = getValidatedCardExpirationDate();
            String authentication = getValidatedCardAuthentication();

            Card card = new Card(cardNumber, expirationDate, authentication);
            rent.setCard(card);

        } catch (InputMismatchException | ValidationException ex) {
            Logger.getLogger(ReturnMoviePage.class.getName()).log(Level.SEVERE, null, ex);
            alertMessageLabel.setText(ex.getMessage());

        }
    }

    // receipt message to be send through email. 
    private String defineReceiptMessage() {
        return "value charged: " + totalPrice + "\n" + " Thank you for renting with Xtra-Vision.";
    }
// send the receipt. Please, note that you need to enter the company email on the EmailUtility Class in order to use this feature.

    public void sendEmail() {
        try {
            EmailUtility.sendEmail(userEmail, defineReceiptMessage());

        } catch (MessagingException e) {
            e.printStackTrace();
        }
    }
// get user card number

    private String getValidatedCardNumber() throws ValidationException {
        if (!(cardNumberTextField.getText().equals(EMPTY_STRING) && cardNumberTextField.getText().length() == 12)) {
            return cardNumberTextField.getText();
        }
        throw new ValidationException("Please enter valid card number!");
    }
// get user card expiration date

    private String getValidatedCardExpirationDate() throws ValidationException {
        if (!(expiredDateTextField.getText().equals(EMPTY_STRING) && expiredDateTextField.getText().length() == 5)) {
            return expiredDateTextField.getText();
        }
        throw new ValidationException("Please enter valid expiration date!");
    }
// get user card password

    private String getValidatedCardAuthentication() throws ValidationException {
        if (!(authenticationTextField.getText().equals(EMPTY_STRING) && authenticationTextField.getText().length() == 6)) {
            return authenticationTextField.getText();
        }
        throw new ValidationException("Please enter valid password!");
    }

}
